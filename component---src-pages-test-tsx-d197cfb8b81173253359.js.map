{"version":3,"file":"component---src-pages-test-tsx-d197cfb8b81173253359.js","mappings":"qMAiCA,UA5BuC,KACrCA,iBACE,MAAMC,QAAyBC,EAAAA,EAAAA,KAC/B,IAGE,MAAMC,EAAO,mCACPC,QAAgBH,EAAiBI,UAAU,SAAUF,GAC3DG,QAAQC,IAAI,CAAEH,YACd,MACMI,EADuB,IAAIC,EAAAA,EAAgBR,EAAkBG,GACjCM,QAChC,kJAGFJ,QAAQC,IAAI,OAAQC,EAGtB,CAFE,MAAOG,GACPL,QAAQK,MAAMA,EAChB,CACF,CAEAC,GAEEC,EAAAA,cAAAA,OAAAA,KACEA,EAAAA,cAAAA,KAAAA,KAAAA,sB","sources":["webpack://encryption/./src/pages/test.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { PageProps } from 'gatsby';\nimport sodiumHelper from '../helpers/libsodium';\nimport { SlimCryptHelper } from '../helpers/crypt';\n\nconst IndexPage: React.FC<PageProps> = () => {\n  async function main() {\n    const fullSodiumHelper = await sodiumHelper();\n    try {\n      //fullSodiumHelper.encryptUsingKeyAsHex;\n      //const KEY_HEX = '724b092810ec86d7e35c9d067702b31ef90bc43a7b598626749914d6a3e033ed';\n      const salt = 'd27d6e8e1427d1c7098f2c8aeccbe198';\n      const KEY_HEX = await fullSodiumHelper.deriveKey('secret', salt); //TODO secretPassPhrase\n      console.log({ KEY_HEX });\n      const slimCryptHelperInner = new SlimCryptHelper(fullSodiumHelper, KEY_HEX);\n      const temp = slimCryptHelperInner.decrypt(\n        '94120917afb093b861b62f87b5a0cc001e84f26e62e5b54b5521847068ab1e3e74965f718c8337450af3cfefdd93a810000d68d3ba990730bd029ff2a052b0f9aefa11d84c3f47',\n      );\n      //const temp = slimCryptHelperInner.encrypt('Pretend this is a secret!\\nShhh!'); // TODO Remove\n      console.log('temp', temp); // TODO\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  main();\n  return (\n    <main>\n      <h1>Here is the page!</h1>\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport { Head } from '../components/Head';\n"],"names":["async","fullSodiumHelper","sodiumHelper","salt","KEY_HEX","deriveKey","console","log","temp","SlimCryptHelper","decrypt","error","main","React"],"sourceRoot":""}