{"version":3,"file":"component---src-pages-one-time-pad-tsx-4b27b8f6f66e195500af.js","mappings":"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","sources":["webpack://encryption/./src/components/Head.tsx","webpack://encryption/./src/helpers/one-time-pad.ts","webpack://encryption/./node_modules/@niyari/base32-ts/dist/base32.js","webpack://encryption/./src/pages/one-time-pad.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { HeadFC } from 'gatsby';\n\nexport const Head: HeadFC = () => {\n  return (\n    <>\n      <meta charSet=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      <title>Encryption Tool</title>\n      <link\n        href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\"\n        rel=\"stylesheet\"\n        integrity=\"sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi\"\n        crossOrigin=\"anonymous\"\n      />\n    </>\n  );\n};\n","import { Base32 } from '@niyari/base32-ts';\n\n/**\n// FIXNOW: Is xorStrings actually how to do a one-time pad in TypeScript? Or is this something else? \nI should use an existing encryption library even if I'm going to skip the concept of salting.\n */\n\nconst base32 = new Base32({ padding: true });\n\n/**\n * Takes a string containing any characters (including non-alphabetic characters, such as digits, punctuation,\n * and whitespace) and encodes it such that the result contains only characters A-Z.\n */\nfunction alphaEncode(input: string): string {\n  return base32.encode(input).toString();\n}\n\n/**\n * Undoes the alphaEncode function such that `alphaDecode(alphaEncode(originalString)) === originalString`.\n */\nfunction alphaDecode(encoded: string): string {\n  return base32.decode(encoded).toString();\n}\n\nfunction xorStrings(a: string, b: string): string {\n  const encoder = new TextEncoder();\n  const decoder = new TextDecoder();\n\n  const bufferA = encoder.encode(a);\n  const bufferB = encoder.encode(b);\n  const result = new Uint8Array(bufferA.length);\n\n  for (let i = 0; i < bufferA.length; i += 1) {\n    result[i] = bufferA[i] ^ bufferB[i];\n  }\n\n  return decoder.decode(result);\n}\n\nfunction encrypt(plaintext: string, key: string): string {\n  const encryptedString = xorStrings(plaintext, key);\n  const encodedEncryptedString = alphaEncode(encryptedString);\n  return encodedEncryptedString;\n}\n\nfunction decrypt(ciphertext: string, key: string): string {\n  const decodedCiphertext = alphaDecode(ciphertext);\n  const plaintextString = xorStrings(decodedCiphertext, key);\n  return plaintextString;\n}\n\nexport { encrypt, decrypt };\n","/*! github.com/niyari/base32-ts/ MIT */\r\nexport class Base32 {\r\n    constructor(options = {}) {\r\n        this._mode = { dic: '', padding: true, re: / /, name: '' };\r\n        this._lastError = { isError: false, message: '' };\r\n        let mode = this._mode = this.setMode(options.variant);\r\n        if (options.padding !== undefined) {\r\n            if (options.padding === true) {\r\n                mode.padding = true;\r\n            }\r\n            else {\r\n                mode.padding = false;\r\n            }\r\n        }\r\n        if (options.array !== undefined && options.array) {\r\n            mode.array = true;\r\n        }\r\n        if (options.raw !== undefined && options.raw) {\r\n            mode.raw = true;\r\n        }\r\n        if (mode.name === \"crockford\") {\r\n            if (options.split !== undefined && options.split) {\r\n                mode.split = parseInt('0' + options.split);\r\n            }\r\n            if (options.checksum !== undefined && options.checksum) {\r\n                mode.checksum = true;\r\n            }\r\n        }\r\n    }\r\n    setMode(variant = '4648') {\r\n        switch (variant) {\r\n            case 'hex': // RFC4648_HEX\r\n                return {\r\n                    dic: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\r\n                    padding: true,\r\n                    re: /^(()|[A-V0-9=]+)$/,\r\n                    name: 'hex'\r\n                };\r\n            case 'maki':\r\n            case 'wah':\r\n            case 'clockwork': // Clockwork Base32\r\n                return {\r\n                    dic: '0123456789ABCDEFGHJKMNPQRSTVWXYZ',\r\n                    padding: false,\r\n                    re: /^(()|[A-TV-Z0-9=]+)$/,\r\n                    name: 'clockwork'\r\n                };\r\n            case 'crockford':\r\n                return {\r\n                    dic: '0123456789ABCDEFGHJKMNPQRSTVWXYZ',\r\n                    padding: false,\r\n                    re: /^(()|[A-TV-Z0-9*~$=U]+)$/,\r\n                    name: 'crockford'\r\n                };\r\n            default: // RFC3548 or RFC4648\r\n        }\r\n        return {\r\n            dic: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\r\n            padding: true,\r\n            re: /^(()|[A-Z2-7=]+)$/,\r\n            name: '4648'\r\n        };\r\n    }\r\n    crockfordEncoder(input) {\r\n        let input32 = '';\r\n        let output = '';\r\n        const dic = this._mode.dic;\r\n        if (typeof input === \"number\") {\r\n            input = Math.floor(input);\r\n        }\r\n        if (typeof input === \"number\" || typeof input === \"bigint\") {\r\n            if (input > -1) {\r\n                input32 = input.toString(32);\r\n            }\r\n        }\r\n        if (input32.length < 1) {\r\n            this.setError('Invalid data: input number.');\r\n            console.log(\"Invalid data: input number.\");\r\n            return '';\r\n        }\r\n        (input32.split('')).map(index => {\r\n            output += dic[parseInt(index, 32)];\r\n        });\r\n        if (this._mode.checksum) { // check_symbol.length + 1 = 37           \r\n            output += (dic + '*~$=U')[Number(BigInt(input) % BigInt(37))];\r\n        }\r\n        if (this._mode.split && this._mode.split > 0) {\r\n            if (output.length > 0) {\r\n                const reg = new RegExp('(.{1,' + this._mode.split + '})', 'g');\r\n                output = output.match(reg).join('-');\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n    multiEncoder(input) {\r\n        if (typeof input !== \"object\") {\r\n            input = new TextEncoder().encode(input);\r\n        }\r\n        input = new Uint8Array(input);\r\n        const dic = this._mode.dic;\r\n        let output = '';\r\n        let value = 0;\r\n        let offset = 0;\r\n        for (let i = 0; i < input.byteLength; i++) {\r\n            value = (value << 8) | input[i];\r\n            offset += 8;\r\n            while (offset >= 5) {\r\n                output += dic[(value >>> (offset - 5)) & 31];\r\n                offset -= 5;\r\n            }\r\n        }\r\n        if (offset > 0) {\r\n            output += dic[(value << (5 - offset)) & 31];\r\n        }\r\n        if (this._mode.padding && output.length % 8) {\r\n            output += '='.repeat(8 - (output.length % 8));\r\n        }\r\n        return output;\r\n    }\r\n    crockfordDecoder(input = '0') {\r\n        input = input.toUpperCase().replace(/[-\\s]/g, '').replace(/O/g, '0').replace(/[IL]/g, '1');\r\n        if (this._mode.re.test(input) === false) {\r\n            this.setError('Invalid data: input strings.');\r\n            console.log(\"Invalid data: input strings.\");\r\n            input = '0';\r\n        }\r\n        const dic = this._mode.dic;\r\n        const check_symbol = input.slice(-1);\r\n        if (this._mode.checksum) {\r\n            input = input.slice(0, -1);\r\n        }\r\n        const length = input.length;\r\n        const output = new Uint8Array(Math.ceil(length * 5 / 8));\r\n        let outputHexStr = '';\r\n        let index = output.byteLength;\r\n        let value = 0;\r\n        let offset = 0;\r\n        const calcValue = () => {\r\n            outputHexStr = (value & 255).toString(16).padStart(2, '0') + outputHexStr;\r\n            output[--index] = value & 255;\r\n            offset -= 8;\r\n            value = value >>> 8;\r\n        };\r\n        for (let i = length - 1; i >= 0; i--) {\r\n            value = value | (dic.indexOf(input[i]) << offset);\r\n            offset += 5;\r\n            if (offset >= 8) {\r\n                calcValue();\r\n            }\r\n        }\r\n        if (value > 0 || input === '0') {\r\n            calcValue();\r\n        }\r\n        if (output.length > 0 && this._mode.checksum) {\r\n            const verify_symbol = (hexStr) => {\r\n                return (BigInt('0x' + hexStr) % BigInt(37) !== BigInt((dic + '*~$=U').indexOf(check_symbol)));\r\n            };\r\n            if (verify_symbol(outputHexStr)) {\r\n                this.setError('Invalid data: Checksum error.');\r\n                console.log(\"Invalid data: Checksum error.\");\r\n            }\r\n        }\r\n        if (this._lastError.isError) {\r\n            if (this._mode.raw) {\r\n                return new Uint8Array(1);\r\n            }\r\n            outputHexStr = '0';\r\n        }\r\n        if (this._mode.raw) {\r\n            return output;\r\n        }\r\n        return '0x' + (outputHexStr.replace(/(^0+)(?!$)/, ''));\r\n    }\r\n    multiDecoder(input = '') {\r\n        input = input.toUpperCase().replace(/\\=+$/, '').replace(/[\\s]/g, '');\r\n        if (this._mode.name === 'clockwork') {\r\n            input = input.replace(/O/g, '0').replace(/[IL]/g, '1');\r\n        }\r\n        if (this._mode.re.test(input) === false) {\r\n            this.setError('Invalid data: Input strings.');\r\n            console.log(\"Invalid data: Input strings.\");\r\n            input = '';\r\n        }\r\n        const dic = this._mode.dic;\r\n        const length = input.length;\r\n        const output = new Uint8Array(length * 5 / 8);\r\n        let value = 0;\r\n        let index = 0;\r\n        let offset = 0;\r\n        for (let i = 0; i < length; i++) {\r\n            value = (value << 5) | dic.indexOf(input[i]);\r\n            offset += 5;\r\n            if (offset >= 8) {\r\n                output[index++] = (value >>> (offset - 8)) & 255;\r\n                offset -= 8;\r\n            }\r\n        }\r\n        if (this._mode.raw) {\r\n            return output;\r\n        }\r\n        return new TextDecoder().decode(output.buffer);\r\n    }\r\n    returnArray(data) {\r\n        let ret = { data: data };\r\n        if (this._lastError.isError) {\r\n            ret.error = this._lastError;\r\n        }\r\n        return ret;\r\n    }\r\n    setError(message) {\r\n        this._lastError = { isError: !0, message: message };\r\n    }\r\n    resetError() {\r\n        this._lastError = { isError: !1, message: '' };\r\n    }\r\n    encode(input) {\r\n        this.resetError();\r\n        let data;\r\n        if (this._mode.name === 'crockford') {\r\n            data = this.crockfordEncoder(input);\r\n        }\r\n        else {\r\n            data = this.multiEncoder(input);\r\n        }\r\n        if (this._mode.array) {\r\n            return this.returnArray(data);\r\n        }\r\n        return data;\r\n    }\r\n    ;\r\n    decode(input) {\r\n        this.resetError();\r\n        let data;\r\n        if (this._mode.name === 'crockford') {\r\n            data = this.crockfordDecoder(input);\r\n        }\r\n        else {\r\n            data = this.multiDecoder(input);\r\n        }\r\n        if (this._mode.array) {\r\n            return this.returnArray(data);\r\n        }\r\n        return data;\r\n    }\r\n    ;\r\n    lasterror() {\r\n        return this._lastError;\r\n    }\r\n}\r\n","import * as React from 'react';\nimport type { PageProps } from 'gatsby';\nimport { graphql } from 'gatsby';\nimport { decrypt } from '../helpers/one-time-pad';\nimport '../helpers/styles.scss';\n\n// These default values are just samples (not real values):\nconst sampleKey = '110_YNKNBWRKOEHXKPZJYXQWDZXGCHMTQEQWRWURQEAEKKZQGSWUMIDGXGRWURQEAEKKZQGSWSMJGMQEQUYSHECWKRGJZTQDIUMIDGXGPNAFZ_';\nconst sampleEncryptedString =\n  'MFSGUBINDQFAUAASCECAYCQGBQMB4GYBD4KBAAIFBUORIAQ4DEIQEDIQCMAQEBICAUGAMAA4AQLBO53ENZSRWBQIAQIAMHY2AMLR2EYCBUFBWFYYD4DRQEAIBN3X4ZT4CANR4FQKCAIQIGA5BEGRWBYBAE======';\n\n/**\n * Takes an array of BIP-39 words and returns an object with the first 4 characters of each word as the key and the full word as the value.\n */\nfunction generateObjectFromWords(words: string[]) {\n  const chunkSize = 4;\n  const wordObject: { [key: string]: string } = {};\n\n  words.forEach((word) => {\n    const trimmedWord = word.trim();\n    if (trimmedWord.length >= chunkSize) {\n      const key = trimmedWord.slice(0, chunkSize).toUpperCase();\n      wordObject[key] = trimmedWord.toUpperCase();\n    }\n  });\n\n  return wordObject;\n}\n\n// https://www.gatsbyjs.com/plugins/gatsby-transformer-plaintext/\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"bip-0039_english.txt\" }) {\n      childPlainText {\n        content\n      }\n    }\n  }\n`;\n\n// TODO: Offer tool for checking Bip39 checksum.\n\nfunction isLinePosition(chunk: string): boolean {\n  return chunk.match(/^[0-9]+$/) !== null;\n}\n\nfunction ResultTable({ decryptedString, wordObject }: { decryptedString: string; wordObject: { [key: string]: string } }) {\n  // Split the input string into 4-character chunks:\n  const chunks = decryptedString.match(/.{1,4}/g) || [];\n  const leftColStyle: any = { paddingRight: '1rem', textAlign: 'right' }; // Properties<string | number, string & {}>\n  return (\n    <>\n      <table style={{ fontSize: '70%' }}>\n        <thead>\n          <tr>\n            <th style={leftColStyle}>#</th>\n            <th>Word</th>\n          </tr>\n        </thead>\n        <tbody style={{ fontFamily: 'monospace' }}>\n          {chunks.map((chunk, index) => {\n            const cell =\n              chunk in wordObject ? (\n                <>\n                  <span className=\"importantPart\">{chunk}</span>\n                  <span className=\"unimportantPart\" style={{ color: '#ccc' }}>\n                    {wordObject[chunk].substring(4)}\n                  </span>\n                </>\n              ) : isLinePosition(chunk) ? (\n                `Find the word at line ${chunk} in https://github.com/bitcoin/bips/blob/e643d247c8bc086745f3031cdee0899803edea2f/bip-0039/english.txt`\n              ) : (\n                '(error)'\n              );\n            return (\n              <tr key={index}>\n                <td style={leftColStyle}>{index + 1}</td>\n                <td>{cell}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {chunks.length < 24 && <p>ERROR: This result was supposed to have 24 words. Check the encrypted string and the key.</p>}\n    </>\n  );\n}\n\nconst IndexPage: React.FC<PageProps> = ({ data }: { data: any }) => {\n  const words = data.file.childPlainText.content.split('\\n');\n  const wordObject = generateObjectFromWords(words);\n\n  // These default values are just samples (not real values):\n  const [key, setKey] = React.useState(sampleKey);\n  const [encryptedString, setEncryptedString] = React.useState(sampleEncryptedString);\n  const [decryptedString, setDecryptedString] = React.useState('');\n\n  React.useEffect(() => {\n    console.log('useEffect', { encryptedString, key });\n    let result = '';\n    try {\n      result = decrypt(encryptedString, key);\n    } catch (error) {\n      console.error('error when decrypting', error);\n    }\n    setDecryptedString(result);\n  }, [encryptedString, key]);\n\n  const textareaStyle = { width: '100%' };\n\n  return (\n    <main>\n      <h1>Encryption Helper</h1>\n      <h2>Prep (carefully read this section)</h2>\n      <ol>\n        <li>Do not start doing any of these steps until you've read ALL of them at least one time carefully beforehand.</li>\n        <li>Buy a brand new Ledger hardware wallet, even if you still own our original one. It's ideal to practice on a fresh one first.</li>\n        <li>Find someone you trust who knows how to teach you all about Ledger hardware wallets and Ledger Live software on your computer.</li>\n        <li>\n          Have them teach you and show you and monitor you (with this fresh new Ledger hardware wallet that you're practicing on) where you will be using it and learning how it\n          works and how to log in and move funds off of it.\n          <ul>\n            <li>\n              If they are good enough at this step, you will be able to proceed with all of the following steps without their presence, which would be ideal so that they are not in\n              a position to copy (steal) our seed phrase (and therefore all of the assets). But if you fully trust them and really do need their help below, that's your call.\n            </li>\n          </ul>\n        </li>\n\n        <li>Search our password manager for instructions.</li>\n        <li>Open this Encryption Helper page only using your own computer (not somebody else's), and be sure to use Brave Private mode.</li>\n        <li>\n          After you've opened this Encryption Helper page, disconnect from wifi, unplug all USB devices, and disconnect any networking cables.\n          <ul>\n            <li>(You want to be sure that no devices are snooping.)</li>\n            <li>This Encryption Helper page will still work even when your computer is disconnected from the internet.</li>\n          </ul>\n        </li>\n        <li>\n          <strong>\n            Remember: never let anybody see what you're about to do on this page (unless you fully trust them not to take note of these details so that they can steal our assets\n            one day).\n          </strong>\n          <ul>\n            <li>Someone having a copy of these details is as bad as if they now fully owned our crypto and you no longer own it at all.</li>\n            <li>Ensure that nobody else is in the room.</li>\n            <li>NEVER take a photo of the results that you're about to see. Photos (especially digital ones) too easily get found, especially by bots.</li>\n          </ul>\n        </li>\n      </ol>\n      <h2>Main steps (carefully read Prep section first)</h2>\n      <ol>\n        <li>\n          Type the <strong>encrypted secrets (garbled text)</strong> here (replacing the demo value):\n          <div>\n            <textarea\n              rows={2}\n              style={textareaStyle}\n              onChange={(event) => {\n                setEncryptedString(event.target.value);\n              }}\n              value={encryptedString}\n            ></textarea>\n          </div>\n        </li>\n        <li>\n          {/* // TODO: Instead of asking for a key, ask for answers to personal questions, and concatenate the answers together and convert to uppercase and then use a PBKDF (with lots of iterations) to create a long key. */}\n          Type the <strong>key</strong> here (replacing the demo value):\n          <div>\n            <textarea\n              rows={2}\n              style={textareaStyle}\n              onChange={(event) => {\n                setKey(event.target.value);\n              }}\n              value={key}\n            ></textarea>\n          </div>\n        </li>\n\n        <li>\n          Decrypted Result:\n          {encryptedString === sampleEncryptedString && (\n            <div>\n              <span style={{ backgroundColor: 'yellow' }}>\n                You're still using the sample inputs above, so this output is not real either (but this is where the real output will be when you start using real input values\n                above):\n              </span>\n            </div>\n          )}\n          <ResultTable decryptedString={decryptedString} wordObject={wordObject} />\n        </li>\n      </ol>\n      <p>(Characters after the first 4 of each word are unimportant, which is why they're faded.)</p>\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport { Head } from '../components/Head';\n"],"names":["Head","React","charSet","name","content","href","rel","integrity","crossOrigin","base32","constructor","options","this","_mode","dic","padding","re","_lastError","isError","message","mode","setMode","variant","undefined","array","raw","split","parseInt","checksum","crockfordEncoder","input","input32","output","Math","floor","toString","length","setError","console","log","map","index","Number","BigInt","reg","RegExp","match","join","multiEncoder","TextEncoder","encode","Uint8Array","value","offset","i","byteLength","repeat","crockfordDecoder","toUpperCase","replace","test","check_symbol","slice","ceil","outputHexStr","calcValue","padStart","indexOf","hexStr","verify_symbol","multiDecoder","TextDecoder","decode","buffer","returnArray","data","ret","error","resetError","lasterror","xorStrings","a","b","encoder","decoder","bufferA","bufferB","result","decrypt","ciphertext","key","encoded","sampleEncryptedString","ResultTable","decryptedString","wordObject","chunks","leftColStyle","paddingRight","textAlign","style","fontSize","fontFamily","chunk","cell","className","color","substring","isLinePosition","_ref2","words","forEach","word","trimmedWord","trim","generateObjectFromWords","file","childPlainText","setKey","encryptedString","setEncryptedString","setDecryptedString","textareaStyle","width","rows","onChange","event","target","backgroundColor"],"sourceRoot":""}